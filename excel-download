const express = require('express');
const { Pool } = require('pg');
const ExcelJS = require('exceljs');

const app = express();
const port = 3000;

const pool = new Pool({
  user: 'your_username',
  host: 'your_host',
  database: 'your_database',
  password: 'your_password',
  port: 5432,
});

app.get('/download-excel', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM your_function_name()');
    
    // Create a new workbook and add a worksheet
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet('Sheet 1');

    // Add headers to the worksheet
    worksheet.addRow(['id', 'proj_nm', 'cat_typ', 'status', 'ex_Date']);

    // Add data to the worksheet
    result.rows.forEach((row) => {
      worksheet.addRow(row);
    });

    // Set the content type and disposition of the response
    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    res.setHeader('Content-Disposition', 'attachment; filename=your_excel_file.xlsx');

    // Write the workbook to the response
    await workbook.xlsx.write(res);

    // End the response
    res.end();
  } catch (error) {
    console.error('Error retrieving data from PostgreSQL:', error);
    res.status(500).send('Internal Server Error');
  }
});

app.listen(port, () => {
  console.log(`Server is running at http://localhost:${port}`);
});





Angular

import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-your-component',
  template: `
    <button (click)="downloadExcel()">Download Excel</button>
  `,
})
export class YourComponent {
  constructor(private http: HttpClient) {}

  downloadExcel() {
    const apiUrl = 'http://localhost:3000/download-excel';

    // Make the HTTP request to the Node.js API endpoint
    this.http.get(apiUrl, { responseType: 'blob' }).subscribe((response) => {
      // Create a Blob from the response
      const blob = new Blob([response], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });

      // Create a link element and click it to trigger the download
      const link = document.createElement('a');
      link.href = window.URL.createObjectURL(blob);
      link.download = 'your_excel_file.xlsx';
      link.click();
    });
  }
}




const express = require('express');
const { Pool } = require('pg');
const ExcelJS = require('exceljs');

const app = express();
const port = 3000;

const pool = new Pool({
  user: 'your_username',
  host: 'your_host',
  database: 'your_database',
  password: 'your_password',
  port: 5432,
});

app.get('/download-excel', (req, res) => {
  const getData = async () => {
    try {
      const result = await pool.query('SELECT * FROM your_function_name()');

      if (result.rows.length > 0) {
        const columns = Object.keys(result.rows[0]);

        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet('Sheet 1');

        worksheet.addRow(columns);

        result.rows.forEach((row) => {
          worksheet.addRow(row);
        });

        const buffer = await workbook.xlsx.writeBuffer();
        
        // Resolve the promise with the Excel file buffer
        return buffer;
      } else {
        throw new Error('No data found');
      }
    } catch (error) {
      console.error('Error retrieving data from PostgreSQL:', error);

      // Reject the promise with an error message
      throw new Error('Internal Server Error');
    }
  };

  // Call the promise and handle the result
  getData()
    .then((excelBuffer) => {
      // Set the content type and disposition of the response
      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
      res.setHeader('Content-Disposition', 'attachment; filename=your_excel_file.xlsx');

      // Write the Excel buffer to the response
      res.status(200).send(excelBuffer);
    })
    .catch((error) => {
      // Handle errors
      console.error('Error:', error);
      res.status(500).send('Internal Server Error');
    });
});

app.listen(port, () => {
  console.log(`Server is running at http://localhost:${port}`);
});

const fs = require('fs');
const createCsvWriter = require('csv-writer').createObjectCsvWriter;

// Assuming you have a function that returns the data
// Replace the function and call with your actual data retrieval logic
function getTableData() {
  // Replace this with your actual data retrieval logic
  return [
    { proj_id: 1, proj_nm: 'Project 1', error_typ: 'Error 1' },
    { proj_id: 2, proj_nm: 'Project 2', error_typ: 'Error 2' },
    // Add more data as needed
  ];
}

async function createCsvFile() {
  const data = getTableData();

  // Define the CSV header
  const header = [
    { id: 'proj_id', title: 'Project ID' },
    { id: 'proj_nm', title: 'Project Name' },
    { id: 'error_typ', title: 'Error Type' },
  ];

  // Create a CSV writer with the specified header and file path
  const csvWriter = createCsvWriter({
    path: 'output.csv',
    header,
  });

  // Write the data to the CSV file
  await csvWriter.writeRecords(data);

  console.log('CSV file created successfully.');
}

// Call the function to create the CSV file
createCsvFile();
