CREATE OR REPLACE FUNCTION insert_data_from_response(response_data jsonb)
RETURNS void AS $$
DECLARE
    item_record jsonb;
    test_execution_id_text text;
    test_execution_ids text[];
BEGIN
    -- Iterate over each item in the response_data array
    FOR item_record IN SELECT * FROM jsonb_array_elements(response_data)
    LOOP
        -- Extract values from the current item
        test_execution_id_text := item_record->>'grp_data';
        
        -- Split the test_execution_id_text into an array of test_execution_ids
        test_execution_ids := string_to_array(test_execution_id_text, '^^');

        -- Iterate over each test_execution_id and insert into t_insert
        FOR i IN array_lower(test_execution_ids, 1) .. array_upper(test_execution_ids, 1)
        LOOP
            INSERT INTO t_insert (test_nm, test_execution_id, proj_nm, cat_nm, cat_type)
            SELECT 
                (item_record->>'test_nm')::text,
                split_part(test_execution_ids[i], '__', 1)::text,
                (item_record->>'proj_nm')::text,
                split_part(test_execution_ids[i], '__', 2)::text,
                split_part(test_execution_ids[i], '__', 3)::text;
        END LOOP;
    END LOOP;
END;
$$ LANGUAGE plpgsql;


-- Create the history table if it doesn't exist
CREATE TABLE IF NOT EXISTS price_history (
    price_id SERIAL PRIMARY KEY,
    name VARCHAR(255),
    price_val NUMERIC,
    description TEXT,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create the trigger function
CREATE OR REPLACE FUNCTION price_update_trigger()
RETURNS TRIGGER AS $$
BEGIN
    -- Insert the updated value into the main table
    INSERT INTO price(price_id, name, price_val, description)
    VALUES (NEW.price_id, NEW.name, NEW.price_val, NEW.description);

    -- Move the previous value to the history table
    INSERT INTO price_history(price_id, name, price_val, description)
    VALUES (OLD.price_id, OLD.name, OLD.price_val, OLD.description);

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create the trigger
CREATE TRIGGER price_update
AFTER UPDATE OF price_val ON price
FOR EACH ROW
EXECUTE FUNCTION price_update_trigger();

